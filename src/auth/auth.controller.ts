import {
  Controller,
  Post,
  Body,
  HttpCode,
  HttpStatus,
  Get,
  UseGuards,
  ValidationPipe,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBody,
  ApiBearerAuth,
  ApiExtraModels,
} from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { LoginDto, LoginResponseDto, ErrorResponseDto } from './dto/login.dto';
import { UserInfoDto, UserProfileDto } from './dto/user.dto';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { CurrentUser } from './current-user.decorator';
import { Public } from './public.decorator';
import { User } from './entities/user.entity';

/**
 * Controlador respons√°vel pelos endpoints de autentica√ß√£o
 * Gerencia as rotas relacionadas ao login, autentica√ß√£o e perfil de usu√°rios
 */
@ApiTags('Autentica√ß√£o')
@ApiExtraModels(LoginDto, LoginResponseDto, UserInfoDto, UserProfileDto, ErrorResponseDto)
@Controller('api/auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  /**
   * Endpoint para realizar login no sistema RPE
   * @param loginDto - Dados de login (email e senha)
   * @returns Token JWT e informa√ß√µes do usu√°rio para autentica√ß√£o
   */
  @Public()
  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Realizar login no sistema',
    description: `
      Autentica um usu√°rio e retorna um token JWT v√°lido por 8 horas.
      O token cont√©m informa√ß√µes do usu√°rio incluindo seus pap√©is (roles) no sistema.
      
      **üë• Usu√°rios dispon√≠veis para teste:**
      
      **üìß ana.oliveira@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Ana Oliveira | üéØ Colaboradora | üíº Desenvolvedora Frontend Pleno | üè¢ Tech/Digital Products
      
      **üìß bruno.mendes@rocketcorp.com** - Senha: password123  
      ‚Ä¢ üë§ Bruno Mendes | üéØ Gestor + Colaborador | üíº Tech Lead S√™nior | üè¢ Tech/Digital Products
      
      **üìß carla.dias@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Carla Dias | üéØ Comit√™ + Colaboradora | üíº Head of Engineering Principal | üè¢ Tech/Digital Products
      
      **üìß diana.costa@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Diana Costa | üéØ RH + Colaboradora | üíº People & Culture Manager S√™nior | üè¢ Business/Operations
      
      **üìß felipe.silva@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Felipe Silva | üéØ Colaborador | üíº Desenvolvedor Backend J√∫nior | üè¢ Tech/Digital Products
      
      **üìß eduardo.tech@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Eduardo Tech | üéØ Admin | üíº DevOps Engineer S√™nior | üè¢ Tech/Operations
      
      **üè¢ Estrutura Organizacional:**
      üëë Carla Dias (Head) ‚Üí Bruno Mendes (Tech Lead) ‚Üí Ana Oliveira & Felipe Silva
      üëë Carla Dias (Head) ‚Üí Diana Costa (RH)
      üîß Eduardo Tech (Admin - Independente)
    `,
  })
  @ApiBody({
    type: LoginDto,
    description: 'Credenciais de login do usu√°rio',
    examples: {
      colaborador: {
        summary: 'Login como Colaborador',
        description: 'Ana Oliveira - Desenvolvedora Frontend Pleno',
        value: {
          email: 'ana.oliveira@rocketcorp.com',
          password: 'password123'
        }
      },
      gestor: {
        summary: 'Login como Gestor',
        description: 'Bruno Mendes - Tech Lead S√™nior (Gestor + Colaborador)',
        value: {
          email: 'bruno.mendes@rocketcorp.com',
          password: 'password123'
        }
      },
      comite: {
        summary: 'Login como Comit√™',
        description: 'Carla Dias - Head of Engineering Principal (Comit√™ + Colaborador)',
        value: {
          email: 'carla.dias@rocketcorp.com',
          password: 'password123'
        }
      },
      rh: {
        summary: 'Login como RH',
        description: 'Diana Costa - People & Culture Manager S√™nior (RH + Colaborador)',
        value: {
          email: 'diana.costa@rocketcorp.com',
          password: 'password123'
        }
      },
      colaborador_junior: {
        summary: 'Login como Colaborador J√∫nior',
        description: 'Felipe Silva - Desenvolvedor Backend J√∫nior',
        value: {
          email: 'felipe.silva@rocketcorp.com',
          password: 'password123'
        }
      },
      admin: {
        summary: 'Login como Admin',
        description: 'Eduardo Tech - DevOps Engineer S√™nior (Admin)',
        value: {
          email: 'eduardo.tech@rocketcorp.com',
          password: 'password123'
        }
      }
    }
  })
  @ApiResponse({
    status: 200,
    description: 'Login realizado com sucesso',
    type: LoginResponseDto,
    examples: {
      colaborador: {
        summary: 'Resposta - Colaborador',
        value: {
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWJ5YXZ3dmQwMDAwdHpzZ281NTgxMnFvIiwibmFtZSI6IkFuYSBPbGl2ZWlyYSIsImVtYWlsIjoiYW5hLm9saXZlaXJhQHJvY2tldGNvcnAuY29tIiwicm9sZXMiOlsiY29sYWJvcmFkb3IiXX0...',
          user: {
            id: 'cmbyavwvd0000tzsgo55812qo',
            name: 'Ana Oliveira',
            email: 'ana.oliveira@rocketcorp.com',
            roles: ['colaborador']
          }
        }
      },
      gestor: {
        summary: 'Resposta - Gestor',
        value: {
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWJ5YXZ3dmgwMDAxdHpzZzVvd2Z4d2JxIiwibmFtZSI6IkJydW5vIE1lbmRlcyIsImVtYWlsIjoiYnJ1bm8ubWVuZGVzQHJvY2tldGNvcnAuY29tIiwicm9sZXMiOlsiY29sYWJvcmFkb3IiLCJnZXN0b3IiXX0...',
          user: {
            id: 'cmbyavwvh0001tzsg5owfxwbq',
            name: 'Bruno Mendes',
            email: 'bruno.mendes@rocketcorp.com',
            roles: ['colaborador', 'gestor']
          }
        }
      },
      admin: {
        summary: 'Resposta - Admin',
        value: {
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWJ5YXZ3dm4wMDA1dHpzZ3h5ejEyM2FiYyIsIm5hbWUiOiJFZHVhcmRvIFRlY2giLCJlbWFpbCI6ImVkdWFyZG8udGVjaEByb2NrZXRjb3JwLmNvbSIsInJvbGVzIjpbImFkbWluIl19...',
          user: {
            id: 'cmbyavwvn0005tzsgxyz123abc',
            name: 'Eduardo Tech',
            email: 'eduardo.tech@rocketcorp.com',
            roles: ['admin']
          }
        }
      }
    }
  })
  @ApiResponse({
    status: 400,
    description: 'Dados de entrada inv√°lidos',
    type: ErrorResponseDto,
    example: {
      statusCode: 400,
      message: ['Email deve ter um formato v√°lido', 'Senha deve ter pelo menos 6 caracteres'],
      error: 'Bad Request'
    }
  })
  @ApiResponse({
    status: 401,
    description: 'Credenciais inv√°lidas',
    type: ErrorResponseDto,
    example: {
      statusCode: 401,
      message: 'Senha incorreta',
      error: 'Unauthorized'
    }
  })
  @ApiResponse({
    status: 404,
    description: 'Usu√°rio n√£o encontrado',
    type: ErrorResponseDto,
    example: {
      statusCode: 404,
      message: 'Usu√°rio n√£o encontrado',
      error: 'Not Found'
    }
  })
  async login(
    @Body() loginDto: LoginDto
  ): Promise<LoginResponseDto> {
    const result = await this.authService.login(loginDto);
    return result;
  }

  /**
   * Endpoint para obter informa√ß√µes do perfil do usu√°rio autenticado
   * @param user - Usu√°rio atual (extra√≠do do JWT)
   * @returns Informa√ß√µes do perfil do usu√°rio
   */
  @Get('profile')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('bearer')
  @ApiOperation({
    summary: 'Obter perfil completo do usu√°rio autenticado',
    description: `
      Retorna as informa√ß√µes completas do perfil do usu√°rio atualmente autenticado baseado no token JWT.
      Inclui dados organizacionais, relacionamentos hier√°rquicos e informa√ß√µes de projetos.
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Perfil do usu√°rio retornado com sucesso',
    type: UserProfileDto,
    examples: {
      colaborador: {
        summary: 'Perfil - Colaborador',
        value: {
          id: 'cmbyavwvd0000tzsgo55812qo',
          name: 'Ana Oliveira',
          email: 'ana.oliveira@rocketcorp.com',
          roles: ['colaborador'],
          jobTitle: 'Desenvolvedora Frontend',
          seniority: 'Pleno',
          careerTrack: 'Tech',
          businessUnit: 'Digital Products',
          projects: ['app-mobile', 'dashboard'],
          managerId: 'cmbyavwvh0001tzsg5owfxwbq',
          managerName: 'Bruno Mendes',
          mentorId: 'cmbyavwvk0002tzsgi5r3edy5',
          mentorName: 'Carla Dias',
          isActive: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          updatedAt: '2024-01-15T10:00:00.000Z'
        }
      },
      gestor: {
        summary: 'Perfil - Gestor',
        value: {
          id: 'cmbyavwvh0001tzsg5owfxwbq',
          name: 'Bruno Mendes',
          email: 'bruno.mendes@rocketcorp.com',
          roles: ['colaborador', 'gestor'],
          jobTitle: 'Tech Lead',
          seniority: 'S√™nior',
          careerTrack: 'Tech',
          businessUnit: 'Digital Products',
          projects: ['api-core', 'arquitetura'],
          managerId: 'cmbyavwvk0002tzsgi5r3edy5',
          managerName: 'Carla Dias',
          directReports: ['cmbyavwvd0000tzsgo55812qo', 'cmbyavwvo0004tzsgxyz123abc'],
          directReportsNames: ['Ana Oliveira', 'Felipe Silva'],
          isActive: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          updatedAt: '2024-01-15T10:00:00.000Z'
        }
      },
      admin: {
        summary: 'Perfil - Admin',
        value: {
          id: 'cmbyavwvn0005tzsgxyz123abc',
          name: 'Eduardo Tech',
          email: 'eduardo.tech@rocketcorp.com',
          roles: ['admin'],
          jobTitle: 'DevOps Engineer',
          seniority: 'S√™nior',
          careerTrack: 'Tech',
          businessUnit: 'Operations',
          projects: ['infraestrutura', 'ci-cd'],
          isActive: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          updatedAt: '2024-01-15T10:00:00.000Z'
        }
      }
    }
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou expirado',
    type: ErrorResponseDto,
    example: {
      statusCode: 401,
      message: 'Token inv√°lido ou expirado',
      error: 'Unauthorized'
    }
  })
  async getProfile(@CurrentUser() user: User): Promise<UserProfileDto> {
    // Retorna o perfil completo do usu√°rio
    return {
      id: user.id,
      name: user.name,
      email: user.email,
      roles: user.roles,
      jobTitle: user.jobTitle,
      seniority: user.seniority,
      careerTrack: user.careerTrack,
      businessUnit: user.businessUnit,
      projects: user.projects,
      managerId: user.managerId,
      directReports: user.directReports,
      mentorId: user.mentorId,
      isActive: user.isActive,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt
    };
  }

  /**
   * Endpoint para verificar o status da API de autentica√ß√£o
   * @returns Status da API
   */
  @Public()
  @Get('status')
  @ApiOperation({
    summary: 'Verificar status da API de autentica√ß√£o',
    description: 'Endpoint p√∫blico para verificar se a API de autentica√ß√£o est√° funcionando.',
  })
  @ApiResponse({
    status: 200,
    description: 'API funcionando corretamente',
    example: {
      status: 'ok',
      message: 'API de autentica√ß√£o RPE funcionando',
      timestamp: '2024-01-15T10:00:00.000Z',
      version: '1.0.0'
    }
  })
  async getStatus() {
    return {
      status: 'ok',
      message: 'API de autentica√ß√£o RPE funcionando',
      timestamp: new Date().toISOString(),
      version: '1.0.0'
    };
  }
} 