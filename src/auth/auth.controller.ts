import {
  Controller,
  Post,
  Body,
  HttpCode,
  HttpStatus,
  Get,
  UseGuards,
  ValidationPipe,
  ForbiddenException,
  Param,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBody,
  ApiBearerAuth,
  ApiExtraModels,
} from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { UserService, UserSummary } from './user.service';
import { LoginDto, LoginResponseDto, ErrorResponseDto } from './dto/login.dto';
import { UserInfoDto, UserProfileDto, CreateUserDto } from './dto';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { CurrentUser } from './current-user.decorator';
import { Public } from './public.decorator';
import { User } from './entities/user.entity';
import { HRRoleGuard } from './guards/hr-role.guard';

/**
 * Controlador respons√°vel pelos endpoints de autentica√ß√£o
 * Gerencia as rotas relacionadas ao login, autentica√ß√£o e perfil de usu√°rios
 */
@ApiTags('Autentica√ß√£o')
@ApiExtraModels(LoginDto, LoginResponseDto, UserInfoDto, UserProfileDto, CreateUserDto, ErrorResponseDto)
@Controller('api')
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly userService: UserService
  ) {}

  /**
   * Endpoint para realizar login no sistema RPE
   * @param loginDto - Dados de login (email e senha)
   * @returns Token JWT e informa√ß√µes do usu√°rio para autentica√ß√£o
   */
  @Public()
  @Post('auth/login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Realizar login no sistema',
    description: `
      Autentica um usu√°rio e retorna um token JWT v√°lido por 8 horas.
      O token cont√©m informa√ß√µes do usu√°rio incluindo seus pap√©is (roles) no sistema.
      
      **üë• Usu√°rios dispon√≠veis para teste:**
      
      **üìß ana.oliveira@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Ana Oliveira | üéØ Colaboradora | üíº Desenvolvedora Frontend Pleno | üè¢ Tech/Digital Products
      
      **üìß bruno.mendes@rocketcorp.com** - Senha: password123  
      ‚Ä¢ üë§ Bruno Mendes | üéØ Gestor + Colaborador | üíº Tech Lead S√™nior | üè¢ Tech/Digital Products
      
      **üìß carla.dias@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Carla Dias | üéØ Comit√™ + Colaboradora | üíº Head of Engineering Principal | üè¢ Tech/Digital Products
      
      **üìß diana.costa@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Diana Costa | üéØ RH + Colaboradora | üíº People & Culture Manager S√™nior | üè¢ Business/Operations
      
      **üìß felipe.silva@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Felipe Silva | üéØ Colaborador | üíº Desenvolvedor Backend J√∫nior | üè¢ Tech/Digital Products
      
      **üìß eduardo.tech@rocketcorp.com** - Senha: password123
      ‚Ä¢ üë§ Eduardo Tech | üéØ Admin | üíº DevOps Engineer S√™nior | üè¢ Tech/Operations
      
      **üè¢ Estrutura Organizacional:**
      üëë Carla Dias (Head) ‚Üí Bruno Mendes (Tech Lead) ‚Üí Ana Oliveira & Felipe Silva
      üëë Carla Dias (Head) ‚Üí Diana Costa (RH)
      üîß Eduardo Tech (Admin - Independente)
    `,
  })
  @ApiBody({
    type: LoginDto,
    description: 'Credenciais de login do usu√°rio',
    examples: {
      colaborador: {
        summary: 'Login como Colaborador',
        description: 'Ana Oliveira - Desenvolvedora Frontend Pleno',
        value: {
          email: 'ana.oliveira@rocketcorp.com',
          password: 'password123'
        }
      },
      gestor: {
        summary: 'Login como Gestor',
        description: 'Bruno Mendes - Tech Lead S√™nior (Gestor + Colaborador)',
        value: {
          email: 'bruno.mendes@rocketcorp.com',
          password: 'password123'
        }
      },
      comite: {
        summary: 'Login como Comit√™',
        description: 'Carla Dias - Head of Engineering Principal (Comit√™ + Colaborador)',
        value: {
          email: 'carla.dias@rocketcorp.com',
          password: 'password123'
        }
      },
      rh: {
        summary: 'Login como RH',
        description: 'Diana Costa - People & Culture Manager S√™nior (RH + Colaborador)',
        value: {
          email: 'diana.costa@rocketcorp.com',
          password: 'password123'
        }
      },
      colaborador_junior: {
        summary: 'Login como Colaborador J√∫nior',
        description: 'Felipe Silva - Desenvolvedor Backend J√∫nior',
        value: {
          email: 'felipe.silva@rocketcorp.com',
          password: 'password123'
        }
      },
      admin: {
        summary: 'Login como Admin',
        description: 'Eduardo Tech - DevOps Engineer S√™nior (Admin)',
        value: {
          email: 'eduardo.tech@rocketcorp.com',
          password: 'password123'
        }
      }
    }
  })
  @ApiResponse({
    status: 200,
    description: 'Login realizado com sucesso',
    type: LoginResponseDto,
    examples: {
      colaborador: {
        summary: 'Resposta - Colaborador',
        value: {
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWJ5YXZ3dmQwMDAwdHpzZ281NTgxMnFvIiwibmFtZSI6IkFuYSBPbGl2ZWlyYSIsImVtYWlsIjoiYW5hLm9saXZlaXJhQHJvY2tldGNvcnAuY29tIiwicm9sZXMiOlsiY29sYWJvcmFkb3IiXX0...',
          user: {
            id: 'cmbyavwvd0000tzsgo55812qo',
            name: 'Ana Oliveira',
            email: 'ana.oliveira@rocketcorp.com',
            roles: ['colaborador']
          }
        }
      },
      gestor: {
        summary: 'Resposta - Gestor',
        value: {
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWJ5YXZ3dmgwMDAxdHpzZzVvd2Z4d2JxIiwibmFtZSI6IkJydW5vIE1lbmRlcyIsImVtYWlsIjoiYnJ1bm8ubWVuZGVzQHJvY2tldGNvcnAuY29tIiwicm9sZXMiOlsiY29sYWJvcmFkb3IiLCJnZXN0b3IiXX0...',
          user: {
            id: 'cmbyavwvh0001tzsg5owfxwbq',
            name: 'Bruno Mendes',
            email: 'bruno.mendes@rocketcorp.com',
            roles: ['colaborador', 'gestor']
          }
        }
      },
      admin: {
        summary: 'Resposta - Admin',
        value: {
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWJ5YXZ3dm4wMDA1dHpzZ3h5ejEyM2FiYyIsIm5hbWUiOiJFZHVhcmRvIFRlY2giLCJlbWFpbCI6ImVkdWFyZG8udGVjaEByb2NrZXRjb3JwLmNvbSIsInJvbGVzIjpbImFkbWluIl19...',
          user: {
            id: 'cmbyavwvn0005tzsgxyz123abc',
            name: 'Eduardo Tech',
            email: 'eduardo.tech@rocketcorp.com',
            roles: ['admin']
          }
        }
      }
    }
  })
  @ApiResponse({
    status: 400,
    description: 'Dados de entrada inv√°lidos',
    type: ErrorResponseDto,
    example: {
      statusCode: 400,
      message: ['Email deve ter um formato v√°lido', 'Senha deve ter pelo menos 6 caracteres'],
      error: 'Bad Request'
    }
  })
  @ApiResponse({
    status: 401,
    description: 'Credenciais inv√°lidas',
    type: ErrorResponseDto,
    example: {
      statusCode: 401,
      message: 'Senha incorreta',
      error: 'Unauthorized'
    }
  })
  @ApiResponse({
    status: 404,
    description: 'Usu√°rio n√£o encontrado',
    type: ErrorResponseDto,
    example: {
      statusCode: 404,
      message: 'Usu√°rio n√£o encontrado',
      error: 'Not Found'
    }
  })
  async login(
    @Body() loginDto: LoginDto
  ): Promise<LoginResponseDto> {
    const result = await this.authService.login(loginDto);
    return result;
  }

  /**
   * Endpoint para criar novos usu√°rios no sistema
   * @param createUserDto - Dados para cria√ß√£o do usu√°rio
   * @returns Usu√°rio criado (sem a senha)
   */
  @Post('users')
  @UseGuards(JwtAuthGuard)
  @HttpCode(HttpStatus.CREATED)
  @ApiBearerAuth('bearer')
  @ApiOperation({
    summary: 'Criar novo usu√°rio no sistema RPE',
    description: `
      Cria um novo usu√°rio no sistema aplicando todas as regras de neg√≥cio e valida√ß√µes automaticamente.
      
      **üîí Acesso Restrito**: Apenas usu√°rios com roles ADMIN ou RH podem criar novos usu√°rios.
      
      **ü§ñ Processamento Autom√°tico:**
      - ‚úÖ Valida√ß√£o de email @rocketcorp.com
      - ‚úÖ Hash seguro da senha
      - ‚úÖ Determina√ß√£o autom√°tica de roles baseada nos projetos
      - ‚úÖ Identifica√ß√£o autom√°tica do gestor direto
      - ‚úÖ Atualiza√ß√£o de relacionamentos hier√°rquicos
      - ‚úÖ Associa√ß√£o a projetos e roles espec√≠ficas
      
      **üìã Valida√ß√µes Aplicadas:**
      - Email √∫nico no sistema
      - Dom√≠nio corporativo obrigat√≥rio
      - Projetos devem existir e estar ativos
      - Mentor deve existir e estar ativo (se informado)
      - Valores de enum v√°lidos para todos os campos
    `,
  })
  @ApiResponse({
    status: 201,
    description: 'Usu√°rio criado com sucesso',
    type: UserProfileDto,
    example: {
      id: 'cmbyavwvn0006tzsgxyz456def',
      name: 'Jo√£o Silva Santos',
      email: 'joao.santos@rocketcorp.com',
      roles: ['colaborador'],
      jobTitle: 'Desenvolvedor Backend',
      seniority: 'J√∫nior',
      careerTrack: 'Tech',
      businessUnit: 'Digital Products',
      projectRoles: [
        {
          projectId: 'api-core',
          projectName: 'API Core',
          roles: ['COLLABORATOR']
        }
      ],
      managerId: 'cmbyavwvh0001tzsg5owfxwbq',
      managerName: 'Bruno Mendes',
      mentorId: 'cmbyavwvk0002tzsgi5r3edy5',
      mentorName: 'Carla Dias',
      isActive: true,
      createdAt: '2024-01-15T10:00:00.000Z',
      updatedAt: '2024-01-15T10:00:00.000Z'
    }
  })
  @ApiResponse({
    status: 400,
    description: 'Dados de entrada inv√°lidos ou regras de neg√≥cio violadas',
    type: ErrorResponseDto,
    examples: {
      'email-invalido': {
        summary: 'Email com dom√≠nio inv√°lido',
        value: {
          statusCode: 400,
          message: 'Email deve ter o dom√≠nio @rocketcorp.com',
          error: 'Bad Request'
        }
      },
      'projeto-inexistente': {
        summary: 'Projeto n√£o encontrado',
        value: {
          statusCode: 400,
          message: 'Projeto com ID projeto-inexistente n√£o encontrado',
          error: 'Bad Request'
        }
      }
    }
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou usu√°rio n√£o autenticado',
    type: ErrorResponseDto,
    example: {
      statusCode: 401,
      message: 'Token inv√°lido ou expirado',
      error: 'Unauthorized'
    }
  })
  @ApiResponse({
    status: 403,
    description: 'Usu√°rio n√£o tem permiss√£o para criar usu√°rios',
    type: ErrorResponseDto,
    example: {
      statusCode: 403,
      message: 'Acesso negado. Apenas usu√°rios ADMIN ou RH podem criar usu√°rios.',
      error: 'Forbidden'
    }
  })
  @ApiResponse({
    status: 409,
    description: 'Email j√° existe no sistema',
    type: ErrorResponseDto,
    example: {
      statusCode: 409,
      message: 'Usu√°rio com este email j√° existe',
      error: 'Conflict'
    }
  })
  async createUser(
    @Body(ValidationPipe) createUserDto: CreateUserDto,
    @CurrentUser() currentUser: User
  ): Promise<UserProfileDto> {
    // Verificar se o usu√°rio tem permiss√£o para criar usu√°rios
    if (!currentUser.roles.includes('admin') && !currentUser.roles.includes('rh')) {
      throw new ForbiddenException('Acesso negado. Apenas usu√°rios ADMIN ou RH podem criar usu√°rios.');
    }

    const newUser = await this.userService.createUser(createUserDto);
    return newUser;
  }

  /**
   * Endpoint para obter informa√ß√µes do perfil do usu√°rio autenticado
   * @param user - Usu√°rio atual (extra√≠do do JWT)
   * @returns Informa√ß√µes do perfil do usu√°rio
   */
  @Get('auth/profile')
  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('bearer')
  @ApiOperation({
    summary: 'Obter perfil completo do usu√°rio autenticado',
    description: `
      Retorna as informa√ß√µes completas do perfil do usu√°rio atualmente autenticado baseado no token JWT.
      Inclui dados organizacionais, relacionamentos hier√°rquicos e informa√ß√µes de projetos.
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Perfil do usu√°rio retornado com sucesso',
    type: UserProfileDto,
    examples: {
      colaborador: {
        summary: 'Perfil - Colaborador',
        value: {
          id: 'cmbyavwvd0000tzsgo55812qo',
          name: 'Ana Oliveira',
          email: 'ana.oliveira@rocketcorp.com',
          roles: ['colaborador'],
          jobTitle: 'Desenvolvedora Frontend',
          seniority: 'Pleno',
          careerTrack: 'Tech',
          businessUnit: 'Digital Products',
          projectRoles: [
            {
              projectId: 'app-mobile',
              projectName: 'App Mobile',
              roles: ['COLLABORATOR']
            },
            {
              projectId: 'dashboard',
              projectName: 'Dashboard Analytics',
              roles: ['COLLABORATOR']
            }
          ],
          managerId: 'cmbyavwvh0001tzsg5owfxwbq',
          managerName: 'Bruno Mendes',
          mentorId: 'cmbyavwvk0002tzsgi5r3edy5',
          mentorName: 'Carla Dias',
          isActive: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          updatedAt: '2024-01-15T10:00:00.000Z'
        }
      },
      gestor: {
        summary: 'Perfil - Gestor',
        value: {
          id: 'cmbyavwvh0001tzsg5owfxwbq',
          name: 'Bruno Mendes',
          email: 'bruno.mendes@rocketcorp.com',
          roles: ['colaborador', 'gestor'],
          jobTitle: 'Tech Lead',
          seniority: 'S√™nior',
          careerTrack: 'Tech',
          businessUnit: 'Digital Products',
          projectRoles: [
            {
              projectId: 'api-core',
              projectName: 'API Core',
              roles: ['COLLABORATOR', 'MANAGER']
            },
            {
              projectId: 'arquitetura',
              projectName: 'Arquitetura',
              roles: ['COLLABORATOR', 'TECH_LEAD']
            }
          ],
          managerId: 'cmbyavwvk0002tzsgi5r3edy5',
          managerName: 'Carla Dias',
          directReports: ['cmbyavwvd0000tzsgo55812qo', 'cmbyavwvo0004tzsgxyz123abc'],
          directReportsNames: ['Ana Oliveira', 'Felipe Silva'],
          isActive: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          updatedAt: '2024-01-15T10:00:00.000Z'
        }
      },
      admin: {
        summary: 'Perfil - Admin',
        value: {
          id: 'cmbyavwvn0005tzsgxyz123abc',
          name: 'Eduardo Tech',
          email: 'eduardo.tech@rocketcorp.com',
          roles: ['admin'],
          jobTitle: 'DevOps Engineer',
          seniority: 'S√™nior',
          careerTrack: 'Tech',
          businessUnit: 'Operations',
          projectRoles: [
            {
              projectId: 'infraestrutura',
              projectName: 'Infraestrutura',
              roles: ['COLLABORATOR', 'ADMIN']
            },
            {
              projectId: 'ci-cd',
              projectName: 'CI/CD Pipeline',
              roles: ['COLLABORATOR', 'ADMIN']
            }
          ],
          isActive: true,
          createdAt: '2024-01-15T10:00:00.000Z',
          updatedAt: '2024-01-15T10:00:00.000Z'
        }
      }
    }
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou expirado',
    type: ErrorResponseDto,
    example: {
      statusCode: 401,
      message: 'Token inv√°lido ou expirado',
      error: 'Unauthorized'
    }
  })
  async getProfile(@CurrentUser() user: User): Promise<UserProfileDto> {
    // Buscar roles espec√≠ficas do usu√°rio por projeto
    const projectRoles = await this.authService.getUserProjectRoles(user.id);
    
    // Retorna o perfil completo do usu√°rio
    return {
      id: user.id,
      name: user.name,
      email: user.email,
      roles: user.roles,
      jobTitle: user.jobTitle,
      seniority: user.seniority,
      careerTrack: user.careerTrack,
      businessUnit: user.businessUnit,
      projectRoles,
      managerId: user.managerId,
      directReports: user.directReports,
      mentorId: user.mentorId,
      isActive: user.isActive,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt
    };
  }

  /**
   * Endpoint para verificar o status da API de autentica√ß√£o
   * @returns Status da API
   */
  @Public()
  @Get('auth/status')
  @ApiOperation({
    summary: 'Verificar status da API de autentica√ß√£o',
    description: 'Endpoint p√∫blico para verificar se a API de autentica√ß√£o est√° funcionando.',
  })
  @ApiResponse({
    status: 200,
    description: 'API funcionando corretamente',
    example: {
      status: 'ok',
      message: 'API de autentica√ß√£o RPE funcionando',
      timestamp: '2024-01-15T10:00:00.000Z',
      version: '1.0.0'
    }
  })
  async getStatus() {
    return {
      status: 'ok',
      message: 'API de autentica√ß√£o RPE funcionando',
      timestamp: new Date().toISOString(),
      version: '1.0.0'
    };
  }

  /**
   * Endpoint para listar todos os usu√°rios (apenas RH/Admin)
   * @returns Lista de todos os usu√°rios do sistema
   */
  @Get('users')
  @UseGuards(JwtAuthGuard, HRRoleGuard)
  @ApiBearerAuth('bearer')
  @ApiOperation({
    summary: 'Listar todos os usu√°rios (apenas RH/Admin)',
    description: `
      Retorna uma lista de todos os usu√°rios do sistema com informa√ß√µes b√°sicas.
      Dispon√≠vel apenas para usu√°rios com role 'rh' ou 'admin'.
      
      **Permiss√µes:** Apenas RH ou Admin
      **Uso:** Gest√£o de colaboradores, relat√≥rios, administra√ß√£o
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Lista de usu√°rios retornada com sucesso',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string', example: 'cmbyavwvd0000tzsgo55812qo' },
          name: { type: 'string', example: 'Ana Oliveira' },
          email: { type: 'string', example: 'ana.oliveira@rocketcorp.com' },
          roles: { type: 'array', items: { type: 'string' }, example: ['colaborador'] },
          jobTitle: { type: 'string', example: 'Desenvolvedora Frontend' },
          seniority: { type: 'string', example: 'Pleno' },
          careerTrack: { type: 'string', example: 'Tech' },
          businessUnit: { type: 'string', example: 'Digital Products' },
          isActive: { type: 'boolean', example: true },
          createdAt: { type: 'string', format: 'date-time' },
          managerName: { type: 'string', example: 'Bruno Mendes', nullable: true },
          directReportsCount: { type: 'number', example: 2 }
        }
      }
    }
  })
  @ApiResponse({
    status: 403,
    description: 'Acesso negado. Apenas usu√°rios do RH podem acessar esta funcionalidade.',
    type: ErrorResponseDto
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou ausente',
    type: ErrorResponseDto
  })
  async getAllUsers(@CurrentUser() currentUser: User) {
    return this.userService.getAllUsers();
  }

  /**
   * Endpoint para listar todos os usu√°rios com progresso de avalia√ß√µes (apenas RH/Admin)
   * @returns Lista de todos os usu√°rios do sistema com progresso detalhado das avalia√ß√µes
   */
  @Get('users/with-evaluation-progress')
  @UseGuards(JwtAuthGuard, HRRoleGuard)
  @ApiBearerAuth('bearer')
  @ApiOperation({
    summary: 'Listar todos os usu√°rios com progresso de avalia√ß√µes (apenas RH/Admin)',
    description: `
      Retorna uma lista de todos os usu√°rios do sistema com informa√ß√µes b√°sicas e progresso detalhado das avalia√ß√µes no ciclo ativo.
      Dispon√≠vel apenas para usu√°rios com role 'rh' ou 'admin'.
      
      **Permiss√µes:** Apenas RH ou Admin
      **Uso:** Dashboard RH, acompanhamento de progresso, relat√≥rios detalhados
      **Dados inclu√≠dos:** Autoavalia√ß√£o, 360, Gestor, Mentoring, Refer√™ncias
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Lista de usu√°rios com progresso retornada com sucesso',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string', example: 'cmbyavwvd0000tzsgo55812qo' },
          name: { type: 'string', example: 'Ana Oliveira' },
          email: { type: 'string', example: 'ana.oliveira@rocketcorp.com' },
          roles: { type: 'array', items: { type: 'string' }, example: ['colaborador'] },
          jobTitle: { type: 'string', example: 'Desenvolvedora Frontend' },
          seniority: { type: 'string', example: 'Pleno' },
          careerTrack: { type: 'string', example: 'Tech' },
          businessUnit: { type: 'string', example: 'Digital Products' },
          isActive: { type: 'boolean', example: true },
          createdAt: { type: 'string', format: 'date-time' },
          managerName: { type: 'string', example: 'Bruno Mendes', nullable: true },
          evaluationProgress: {
            type: 'object',
            properties: {
              selfAssessment: {
                type: 'object',
                properties: {
                  status: { type: 'string', example: 'SUBMITTED' },
                  submittedAt: { type: 'string', format: 'date-time', nullable: true }
                }
              },
              assessments360Received: { type: 'number', example: 3 },
              managerAssessment: {
                type: 'object',
                properties: {
                  status: { type: 'string', example: 'SUBMITTED' },
                  submittedAt: { type: 'string', format: 'date-time', nullable: true }
                }
              },
              mentoringAssessmentsReceived: { type: 'number', example: 1 },
              referenceFeedbacksReceived: { type: 'number', example: 2 },
              committeeAssessment: {
                type: 'object',
                properties: {
                  status: { type: 'string', example: 'PENDING' },
                  submittedAt: { type: 'string', format: 'date-time', nullable: true }
                }
              }
            }
          }
        }
      }
    }
  })
  @ApiResponse({
    status: 403,
    description: 'Acesso negado. Apenas usu√°rios do RH podem acessar esta funcionalidade.',
    type: ErrorResponseDto
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou ausente',
    type: ErrorResponseDto
  })
  @ApiResponse({
    status: 404,
    description: 'Nenhum ciclo ativo encontrado',
    type: ErrorResponseDto
  })
  async getAllUsersWithEvaluationProgress(@CurrentUser() currentUser: User) {
    return this.userService.getAllUsersWithEvaluationProgress();
  }

  /**
   * Endpoint para obter dados detalhados de avalia√ß√£o de um colaborador (apenas RH/Admin)
   * @param collaboratorId - ID do colaborador
   * @returns Dados detalhados das avalia√ß√µes do colaborador
   */
  @Get('users/:collaboratorId/evaluation-details')
  @UseGuards(JwtAuthGuard, HRRoleGuard)
  @ApiBearerAuth('bearer')
  @ApiOperation({
    summary: 'Obter dados detalhados de avalia√ß√£o de um colaborador (apenas RH/Admin)',
    description: `
      Retorna dados detalhados das avalia√ß√µes de um colaborador espec√≠fico, incluindo notas e resumos.
      Dispon√≠vel apenas para usu√°rios com role 'rh' ou 'admin'.
      
      **Permiss√µes:** Apenas RH ou Admin
      **Uso:** Visualiza√ß√£o detalhada de avalia√ß√µes para an√°lise do RH
      **Dados inclu√≠dos:** Autoavalia√ß√£o, 360, Gestor, Mentoring, Refer√™ncias, m√©dias calculadas
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Dados detalhados de avalia√ß√£o retornados com sucesso',
    schema: {
      type: 'object',
      properties: {
        cycle: { type: 'string', example: '2025.1' },
        currentPhase: { type: 'string', example: 'ASSESSMENTS' },
        collaborator: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'cmbyavwvd0000tzsgo55812qo' },
            name: { type: 'string', example: 'Ana Oliveira' },
            email: { type: 'string', example: 'ana.oliveira@rocketcorp.com' },
            jobTitle: { type: 'string', example: 'Desenvolvedora Frontend' },
            seniority: { type: 'string', example: 'Pleno' }
          }
        },
        evaluationScores: {
          type: 'object',
          properties: {
            selfAssessment: { type: 'number', example: 4.2, nullable: true },
            assessment360: { type: 'number', example: 4.0, nullable: true },
            managerAssessment: { type: 'number', example: 4.5, nullable: true },
            mentoring: { type: 'number', example: 4.8, nullable: true }
          }
        },
        selfAssessment: { type: 'object', nullable: true },
        assessments360Received: { type: 'array' },
        managerAssessmentsReceived: { type: 'array' },
        mentoringAssessmentsReceived: { type: 'array' },
        referenceFeedbacksReceived: { type: 'array' },
        committeeAssessment: { type: 'object', nullable: true },
        summary: {
          type: 'object',
          properties: {
            totalAssessmentsReceived: { type: 'number', example: 5 },
            hasCommitteeAssessment: { type: 'boolean', example: false },
            isEqualizationComplete: { type: 'boolean', example: false }
          }
        }
      }
    }
  })
  @ApiResponse({
    status: 404,
    description: 'Colaborador n√£o encontrado',
    type: ErrorResponseDto
  })
  @ApiResponse({
    status: 403,
    description: 'Acesso negado. Apenas usu√°rios do RH podem acessar esta funcionalidade.',
    type: ErrorResponseDto
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou ausente',
    type: ErrorResponseDto
  })
  async getCollaboratorEvaluationDetails(
    @Param('collaboratorId') collaboratorId: string,
    @CurrentUser() currentUser: User
  ) {
    return this.userService.getCollaboratorEvaluationDetails(collaboratorId);
  }

  @Get('users/potential-mentors')
  @UseGuards(JwtAuthGuard, HRRoleGuard)
  @ApiOperation({
    summary: 'Buscar usu√°rios potenciais para serem mentores',
    description: 'Retorna lista de usu√°rios ativos que n√£o s√£o mentores de ningu√©m ainda e podem ser designados como mentores',
  })
  @ApiResponse({
    status: 200,
    description: 'Lista de usu√°rios potenciais mentores retornada com sucesso',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string', example: 'user-123' },
          name: { type: 'string', example: 'Ana Oliveira' },
          email: { type: 'string', example: 'ana.oliveira@rocketcorp.com' },
          jobTitle: { type: 'string', example: 'Desenvolvedora Frontend Pleno' },
          seniority: { type: 'string', example: 'Pleno' },
          businessUnit: { type: 'string', example: 'Tech/Digital Products' }
        }
      }
    }
  })
  @ApiResponse({
    status: 403,
    description: 'Acesso negado. Apenas usu√°rios do RH/Admin podem acessar esta funcionalidade.',
    type: ErrorResponseDto
  })
  @ApiResponse({
    status: 401,
    description: 'Token inv√°lido ou ausente',
    type: ErrorResponseDto
  })
  async getPotentialMentors(@CurrentUser() currentUser: User): Promise<UserSummary[]> {
    return this.userService.getPotentialMentors();
  }
} 