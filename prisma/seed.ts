import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed do banco de dados...');

  // ==========================================
  // SEED - EVALUATION CYCLES
  // ==========================================
  console.log('üìÖ Criando ciclos de avalia√ß√£o...');

  const cycles = [
    {
      id: '2024.2',
      name: '2024.2',
      status: 'CLOSED' as const,
      phase: 'EQUALIZATION' as const,
      startDate: new Date('2024-07-01'),
      endDate: new Date('2024-12-31'),
    },
    {
      id: '2025.1',
      name: '2025.1',
      status: 'OPEN' as const,
      phase: 'ASSESSMENTS' as const,
      startDate: new Date('2025-01-01'),
      endDate: new Date('2025-06-30'),
      assessmentDeadline: new Date('2025-03-15T23:59:59.999Z'),
      managerDeadline: new Date('2025-04-15T23:59:59.999Z'),
      equalizationDeadline: new Date('2025-05-15T23:59:59.999Z'),
    },
    {
      id: '2025.2',
      name: '2025.2',
      status: 'UPCOMING' as const,
      phase: 'ASSESSMENTS' as const,
      startDate: new Date('2025-07-01'),
      endDate: new Date('2025-12-31'),
    },
  ];

  for (const cycle of cycles) {
    await prisma.evaluationCycle.upsert({
      where: { id: cycle.id },
      update: cycle,
      create: cycle,
    });
  }

  // ==========================================
  // SEED - CRITERIA (CRIT√âRIOS DE AVALIA√á√ÉO)
  // ==========================================
  console.log('üìã Criando crit√©rios de avalia√ß√£o...');

  const criteria = [
    // BEHAVIOR - Crit√©rios Comportamentais
    {
      id: 'sentimento-de-dono',
      name: 'Sentimento de Dono',
      description: 'Demonstra responsabilidade e cuidado com o trabalho e resultados da empresa',
      pillar: 'BEHAVIOR' as const,
    },
    {
      id: 'resiliencia-adversidades',
      name: 'Resili√™ncia nas Adversidades',
      description: 'Mant√©m-se firme e adapt√°vel diante de desafios e dificuldades',
      pillar: 'BEHAVIOR' as const,
    },
    {
      id: 'organizacao-trabalho',
      name: 'Organiza√ß√£o no Trabalho',
      description: 'Mant√©m organiza√ß√£o pessoal e estrutura√ß√£o eficiente das atividades',
      pillar: 'BEHAVIOR' as const,
    },
    {
      id: 'capacidade-aprender',
      name: 'Capacidade de Aprender',
      description: 'Busca constantemente novos conhecimentos e desenvolvimento pessoal',
      pillar: 'BEHAVIOR' as const,
    },
    {
      id: 'team-player',
      name: 'Ser "Team Player"',
      description: 'Trabalha efetivamente em equipe e contribui para um ambiente colaborativo',
      pillar: 'BEHAVIOR' as const,
    },

    // EXECUTION - Crit√©rios de Execu√ß√£o
    {
      id: 'entregar-qualidade',
      name: 'Entregar com Qualidade',
      description: 'Entrega trabalho com alta qualidade e aten√ß√£o aos detalhes',
      pillar: 'EXECUTION' as const,
    },
    {
      id: 'atender-prazos',
      name: 'Atender aos Prazos',
      description: 'Entrega tarefas e projetos dentro dos prazos estabelecidos',
      pillar: 'EXECUTION' as const,
    },
    {
      id: 'fazer-mais-menos',
      name: 'Fazer Mais com Menos',
      description: 'Maximiza resultados com recursos dispon√≠veis, otimizando efici√™ncia',
      pillar: 'EXECUTION' as const,
    },
    {
      id: 'pensar-fora-caixa',
      name: 'Pensar Fora da Caixa',
      description: 'Demonstra criatividade e inova√ß√£o na resolu√ß√£o de problemas',
      pillar: 'EXECUTION' as const,
    },

    // MANAGEMENT - Crit√©rios de Gest√£o e Lideran√ßa (para gestores)
    {
      id: 'gestao-gente',
      name: 'Gente',
      description: 'Desenvolve, motiva e lidera pessoas de forma eficaz',
      pillar: 'MANAGEMENT' as const,
    },
    {
      id: 'gestao-resultados',
      name: 'Resultados',
      description: 'Foca em resultados e entrega valor consistente para a organiza√ß√£o',
      pillar: 'MANAGEMENT' as const,
    },
    {
      id: 'evolucao-rocket-corp',
      name: 'Evolu√ß√£o da Rocket Corp',
      description: 'Contribui estrategicamente para o crescimento e evolu√ß√£o da empresa',
      pillar: 'MANAGEMENT' as const,
    },
  ];

  for (const criterion of criteria) {
    await prisma.criterion.upsert({
      where: { id: criterion.id },
      update: criterion,
      create: criterion,
    });
  }

  // ==========================================
  // SEED - PROJECTS
  // ==========================================
  console.log('üèóÔ∏è Criando projetos...');

  const projects = [
    {
      id: 'projeto-alpha',
      name: 'Projeto Alpha',
      description: 'Desenvolvimento da nova plataforma de vendas com React e Node.js',
    },
    {
      id: 'projeto-beta',
      name: 'Projeto Beta',
      description: 'Moderniza√ß√£o do sistema de RH com migra√ß√£o para microservi√ßos',
    },
    {
      id: 'projeto-gamma',
      name: 'Projeto Gamma',
      description: 'Implementa√ß√£o de BI e analytics com Power BI e Apache Spark',
    },
    {
      id: 'projeto-delta',
      name: 'Projeto Delta',
      description: 'Migra√ß√£o para cloud computing (AWS) e containeriza√ß√£o com Docker',
    },
    {
      id: 'projeto-mobile-app',
      name: 'App Mobile RocketCorp',
      description: 'Desenvolvimento do aplicativo m√≥vel nativo para iOS e Android',
    },
    {
      id: 'projeto-api-core',
      name: 'API Core',
      description: 'Refatora√ß√£o e otimiza√ß√£o da API principal do sistema',
    },
  ];

  for (const project of projects) {
    await prisma.project.upsert({
      where: { id: project.id },
      update: project,
      create: project,
    });
  }

  // ==========================================
  // LIMPEZA E CRIA√á√ÉO DE USU√ÅRIOS
  // ==========================================
  console.log('üßπ Limpando dados existentes...');
  await prisma.userProjectRole.deleteMany();
  await prisma.userProjectAssignment.deleteMany();
  await prisma.userRoleAssignment.deleteMany();
  await prisma.user.deleteMany();

  // Cria senha hasheada
  const password = 'password123';
  const hashedPassword = await bcrypt.hash(password, 10);

  console.log('üë• Criando usu√°rios com nova estrutura...');

  // ==========================================
  // USU√ÅRIO 1: EDUARDO TECH - ADMIN PURO
  // ==========================================
  const eduardo = await prisma.user.create({
    data: {
      name: 'Eduardo Jos√© Ferreira da Silva',
      email: 'eduardo.tech@rocketcorp.com',
      passwordHash: hashedPassword,
      roles: JSON.stringify(['admin']), // Campo legado - mantido para compatibilidade

      // Dados organizacionais completos
      jobTitle: 'DevOps Engineer',
      seniority: 'S√™nior',
      careerTrack: 'Tech',
      businessUnit: 'Operations',

      // Admin puro - sem v√≠nculos de projeto ou hierarquia
      projects: null,
      managerId: null,
      directReports: null,
      mentorId: null,

      isActive: true,
    },
  });

  console.log(`‚úÖ Usu√°rio ADMIN criado: ${eduardo.name} (${eduardo.email})`);

  // ==========================================
  // USU√ÅRIO 2: DIANA COSTA - RH PURO
  // ==========================================
  const diana = await prisma.user.create({
    data: {
      name: 'Diana Cristina Costa Lima',
      email: 'diana.costa@rocketcorp.com',
      passwordHash: hashedPassword,
      roles: JSON.stringify(['rh']),

      // Dados organizacionais completos
      jobTitle: 'People & Culture Manager',
      seniority: 'S√™nior',
      careerTrack: 'Business',
      businessUnit: 'Operations',

      // RH puro - sem v√≠nculos de projeto ou hierarquia
      projects: null,
      managerId: null,
      directReports: null,
      mentorId: null,

      isActive: true,
    },
  });

  console.log(`‚úÖ Usu√°rio RH criado: ${diana.name} (${diana.email})`);

  // ==========================================
  // USU√ÅRIO 3: CARLA DIAS - COMIT√ä PURO
  // ==========================================
  const carla = await prisma.user.create({
    data: {
      name: 'Carla Regina Dias Fernandes',
      email: 'carla.dias@rocketcorp.com',
      passwordHash: hashedPassword,
      roles: JSON.stringify(['comite']),

      // Dados organizacionais completos
      jobTitle: 'Head of Engineering',
      seniority: 'Principal',
      careerTrack: 'Tech',
      businessUnit: 'Digital Products',

      // Comit√™ puro - sem v√≠nculos de projeto ou hierarquia
      projects: null,
      managerId: null,
      directReports: null,
      mentorId: null,

      isActive: true,
    },
  });

  console.log(`‚úÖ Usu√°rio COMIT√ä criado: ${carla.name} (${carla.email})`);

  // ==========================================
  // USU√ÅRIO 4: BRUNO MENDES - GESTOR + COLABORADOR
  // ==========================================
  const bruno = await prisma.user.create({
    data: {
      name: 'Bruno Andr√© Mendes Carvalho',
      email: 'bruno.mendes@rocketcorp.com',
      passwordHash: hashedPassword,
      roles: JSON.stringify(['colaborador', 'gestor']),

      // Dados organizacionais completos
      jobTitle: 'Tech Lead',
      seniority: 'S√™nior',
      careerTrack: 'Tech',
      businessUnit: 'Digital Products',

      // Dados de projetos (legado - agora substitu√≠do por UserProjectAssignment + UserProjectRole)
      projects: JSON.stringify(['projeto-alpha', 'projeto-api-core']),
      managerId: null,
      directReports: JSON.stringify([]), // Ser√° atualizado ap√≥s criar Ana e Felipe
      mentorId: null,

      isActive: true,
    },
  });

  console.log(`‚úÖ Usu√°rio GESTOR+COLABORADOR criado: ${bruno.name} (${bruno.email})`);

  // ==========================================
  // USU√ÅRIO 5: ANA OLIVEIRA - COLABORADORA
  // ==========================================
  const ana = await prisma.user.create({
    data: {
      name: 'Ana Beatriz Oliveira Santos',
      email: 'ana.oliveira@rocketcorp.com',
      passwordHash: hashedPassword,
      roles: JSON.stringify(['colaborador']),

      // Dados organizacionais completos
      jobTitle: 'Desenvolvedora Frontend',
      seniority: 'Pleno',
      careerTrack: 'Tech',
      businessUnit: 'Digital Products',

      // Dados de projetos
      projects: JSON.stringify(['projeto-alpha', 'projeto-mobile-app']),
      managerId: bruno.id, // Bruno √© seu gestor
      directReports: null, // Ana n√£o tem liderados
      mentorId: null, // Sem mentor neste exemplo

      isActive: true,
    },
  });

  console.log(`‚úÖ Usu√°rio COLABORADOR criado: ${ana.name} (${ana.email})`);

  // ==========================================
  // USU√ÅRIO 6: FELIPE SILVA - COLABORADOR
  // ==========================================
  const felipe = await prisma.user.create({
    data: {
      name: 'Felipe Augusto Silva Rodrigues',
      email: 'felipe.silva@rocketcorp.com',
      passwordHash: hashedPassword,
      roles: JSON.stringify(['colaborador']),

      // Dados organizacionais completos
      jobTitle: 'Desenvolvedor Backend',
      seniority: 'J√∫nior',
      careerTrack: 'Tech',
      businessUnit: 'Digital Products',

      // Dados de projetos
      projects: JSON.stringify(['projeto-api-core', 'projeto-mobile-app']),
      managerId: bruno.id, // Bruno √© seu gestor
      directReports: null, // Felipe n√£o tem liderados
      mentorId: ana.id, // Ana √© sua mentora

      isActive: true,
    },
  });

  console.log(`‚úÖ Usu√°rio COLABORADOR criado: ${felipe.name} (${felipe.email})`);

  // ==========================================
  // ATUALIZAR DIRECT REPORTS DO BRUNO
  // ==========================================
  await prisma.user.update({
    where: { id: bruno.id },
    data: {
      directReports: JSON.stringify([ana.id, felipe.id]),
    },
  });
  console.log(`‚úÖ Bruno ‚Üí Liderados: Ana e Felipe`);

  // ==========================================
  // CONFIGURA√á√ÉO DE ROLE ASSIGNMENTS (NOVAS ESTRUTURAS)
  // ==========================================
  console.log('üë• Configurando role assignments globais...');

  const roleAssignments = [
    // Eduardo: Admin puro
    { userId: eduardo.id, role: 'ADMIN' as const },

    // Diana: RH puro
    { userId: diana.id, role: 'RH' as const },

    // Carla: Comit√™ puro
    { userId: carla.id, role: 'COMMITTEE' as const },

    // Bruno: Colaborador + Gestor
    { userId: bruno.id, role: 'COLLABORATOR' as const },
    { userId: bruno.id, role: 'MANAGER' as const },

    // Ana: Colaboradora
    { userId: ana.id, role: 'COLLABORATOR' as const },

    // Felipe: Colaborador
    { userId: felipe.id, role: 'COLLABORATOR' as const },
  ];

  for (const assignment of roleAssignments) {
    await prisma.userRoleAssignment.upsert({
      where: {
        userId_role: {
          userId: assignment.userId,
          role: assignment.role,
        },
      },
      update: {},
      create: assignment,
    });
  }

  // ==========================================
  // CONFIGURA√á√ÉO DE ATRIBUI√á√ïES DE PROJETO (APENAS PARA MEMBROS DE PROJETO)
  // ==========================================
  console.log('üìã Configurando atribui√ß√µes de projeto...');

  const projectAssignments = [
    // Bruno: Projeto Alpha (liderar) e API Core
    { userId: bruno.id, projectId: 'projeto-alpha' },
    { userId: bruno.id, projectId: 'projeto-api-core' },

    // Ana: Projeto Alpha e Mobile App
    { userId: ana.id, projectId: 'projeto-alpha' },
    { userId: ana.id, projectId: 'projeto-mobile-app' },

    // Felipe: API Core e Mobile App
    { userId: felipe.id, projectId: 'projeto-api-core' },
    { userId: felipe.id, projectId: 'projeto-mobile-app' },
  ];

  for (const assignment of projectAssignments) {
    await prisma.userProjectAssignment.upsert({
      where: {
        userId_projectId: {
          userId: assignment.userId,
          projectId: assignment.projectId,
        },
      },
      update: {},
      create: assignment,
    });
  }

  // ==========================================
  // CONFIGURA√á√ÉO DE ROLES POR PROJETO (UserProjectRole)
  // ==========================================
  console.log('üîë Configurando roles espec√≠ficas por projeto...');

  const userProjectRoles = [
    // PROJETO ALPHA - Plataforma de Vendas
    { userId: bruno.id, projectId: 'projeto-alpha', role: 'MANAGER' as const }, // Bruno √© gestor no Alpha
    { userId: ana.id, projectId: 'projeto-alpha', role: 'COLLABORATOR' as const }, // Ana colaboradora no Alpha

    // PROJETO API CORE
    { userId: bruno.id, projectId: 'projeto-api-core', role: 'MANAGER' as const }, // Bruno gestor no API Core
    { userId: felipe.id, projectId: 'projeto-api-core', role: 'COLLABORATOR' as const }, // Felipe colaborador no API Core

    // PROJETO MOBILE APP
    { userId: ana.id, projectId: 'projeto-mobile-app', role: 'COLLABORATOR' as const }, // Ana colaboradora no Mobile
    { userId: felipe.id, projectId: 'projeto-mobile-app', role: 'COLLABORATOR' as const }, // Felipe colaborador no Mobile
  ];

  for (const userProjectRole of userProjectRoles) {
    await prisma.userProjectRole.upsert({
      where: {
        userId_projectId_role: {
          userId: userProjectRole.userId,
          projectId: userProjectRole.projectId,
          role: userProjectRole.role,
        },
      },
      update: {},
      create: userProjectRole,
    });
  }

  // ==========================================
  // SEED - DADOS DE AVALIA√á√ÉO DE EXEMPLO (NOVO)
  // ==========================================
  console.log('üìù Criando dados de avalia√ß√£o de exemplo para o ciclo 2025.1...');

  // Cen√°rio 1: Ana j√° submeteu sua autoavalia√ß√£o.
  await prisma.selfAssessment.create({
    data: {
      authorId: ana.id,
      cycle: '2025.1',
      status: 'SUBMITTED',
      answers: {
        create: {
          criterionId: 'sentimento-de-dono',
          score: 5,
          justification: 'Sempre assumo a responsabilidade pelos projetos.',
        },
      },
    },
  });

  // Cen√°rio 2: Felipe apenas come√ßou a sua autoavalia√ß√£o (est√° em rascunho).
  await prisma.selfAssessment.create({
    data: {
      authorId: felipe.id,
      cycle: '2025.1',
      status: 'DRAFT',
      answers: {
        create: {
          criterionId: 'team-player',
          score: 4,
          justification: 'Colaboro bem com a equipe.',
        },
      },
    },
  });

  // Cen√°rio 3: Bruno (o gestor) j√° avaliou a Ana.
  await prisma.managerAssessment.create({
    data: {
      authorId: bruno.id,
      evaluatedUserId: ana.id,
      cycle: '2025.1',
      status: 'SUBMITTED',
      answers: {
        create: {
          criterionId: 'entregar-qualidade',
          score: 5,
          justification: 'As entregas da Ana s√£o sempre de alta qualidade.',
        },
      },
    },
  });

  // Cen√°rio 4: Ana (colega) j√° fez uma avalia√ß√£o 360 do Felipe.
  await prisma.assessment360.create({
    data: {
      authorId: ana.id,
      evaluatedUserId: felipe.id,
      cycle: '2025.1',
      status: 'SUBMITTED',
      overallScore: 4,
      strengths: 'Muito proativo.',
      improvements: 'Pode melhorar a organiza√ß√£o das tarefas.',
    },
  });

  console.log('‚úÖ Dados de avalia√ß√£o de exemplo criados.');

  console.log('‚úÖ Estruturas de relacionamento configuradas!');

  // ==========================================
  // RESUMO FINAL
  // ==========================================
  console.log('‚úÖ Seed conclu√≠do com sucesso!');
  console.log('üìä Estruturas criadas:');
  console.log(`   - ${cycles.length} ciclos de avalia√ß√£o com sistema de fases`);
  console.log(
    `   - ${criteria.length} crit√©rios (${criteria.filter((c) => c.pillar === 'BEHAVIOR').length} comportamentais, ${criteria.filter((c) => c.pillar === 'EXECUTION').length} execu√ß√£o, ${criteria.filter((c) => c.pillar === 'MANAGEMENT').length} gest√£o)`,
  );
  console.log(`   - ${projects.length} projetos`);
  console.log(`   - 6 usu√°rios com perfis separados por escopo`);
  console.log(`   - ${roleAssignments.length} atribui√ß√µes de role globais`);
  console.log(`   - ${projectAssignments.length} atribui√ß√µes de projeto`);
  console.log(`   - ${userProjectRoles.length} roles espec√≠ficas por projeto`);
  console.log('');

  // ==========================================
  // RESUMO DOS CICLOS E FASES
  // ==========================================
  console.log('üîÑ Sistema de Fases dos Ciclos:');
  console.log('');
  cycles.forEach((cycle) => {
    const statusIcon = cycle.status === 'OPEN' ? 'üü¢' : cycle.status === 'CLOSED' ? 'üî¥' : 'üü°';
    let phaseIcon = '‚ùì';
    const phase = cycle.phase as string;
    if (phase === 'ASSESSMENTS') phaseIcon = 'üìù';
    else if (phase === 'MANAGER_REVIEWS') phaseIcon = 'üëî';
    else if (phase === 'EQUALIZATION') phaseIcon = '‚öñÔ∏è';

    console.log(`  ${statusIcon} ${cycle.name} | ${cycle.status} | ${phaseIcon} ${cycle.phase}`);
  });

  console.log('');
  console.log('üìã Descri√ß√£o das Fases:');
  console.log('  üìù ASSESSMENTS (Fase 1): Autoavalia√ß√£o, 360, Mentoring, Reference');
  console.log('  üëî MANAGER_REVIEWS (Fase 2): Avalia√ß√µes de Gestor');
  console.log('  ‚öñÔ∏è EQUALIZATION (Fase 3): Equaliza√ß√£o final');
  console.log('');
  console.log('üéØ Ciclo Ativo: 2025.1 na fase ASSESSMENTS');
  console.log('  ‚úÖ Permitidas: Autoavalia√ß√£o, 360, Mentoring, Reference');
  console.log('  ‚ùå Bloqueadas: Avalia√ß√µes de Gestor');
  console.log('');

  console.log('üë• Usu√°rios dispon√≠veis para login:');
  console.log('');
  console.log('üîß PAP√âIS GLOBAIS (sem v√≠nculos de projeto):');
  console.log('  üìß eduardo.tech@rocketcorp.com - Senha: password123');
  console.log(
    '     üë§ Eduardo Jos√© Ferreira da Silva | üéØ ADMIN PURO | üíº DevOps Engineer S√™nior | üè¢ Operations',
  );
  console.log('  üìß diana.costa@rocketcorp.com - Senha: password123');
  console.log(
    '     üë§ Diana Cristina Costa Lima | üéØ RH PURO | üíº People & Culture Manager S√™nior | üè¢ Operations',
  );
  console.log('  üìß carla.dias@rocketcorp.com - Senha: password123');
  console.log(
    '     üë§ Carla Regina Dias Fernandes | üéØ COMIT√ä PURO | üíº Head of Engineering Principal | üè¢ Digital Products',
  );
  console.log('');
  console.log('üë• MEMBROS DE PROJETO (com v√≠nculos de projeto):');
  console.log('  üìß bruno.mendes@rocketcorp.com - Senha: password123');
  console.log(
    '     üë§ Bruno Andr√© Mendes Carvalho | üéØ Gestor + Colaborador | üíº Tech Lead S√™nior | üè¢ Digital Products',
  );
  console.log('  üìß ana.oliveira@rocketcorp.com - Senha: password123');
  console.log(
    '     üë§ Ana Beatriz Oliveira Santos | üéØ Colaboradora | üíº Desenvolvedora Frontend Pleno | üè¢ Digital Products',
  );
  console.log('  üìß felipe.silva@rocketcorp.com - Senha: password123');
  console.log(
    '     üë§ Felipe Augusto Silva Rodrigues | üéØ Colaborador | üíº Desenvolvedor Backend J√∫nior | üè¢ Digital Products',
  );
  console.log('');
  console.log('üè¢ Nova Estrutura Organizacional:');
  console.log('  üîß Eduardo Tech (Admin) - Independente, gerencia sistema');
  console.log('  üë• Diana Costa (RH) - Independente, gerencia pessoas e pol√≠ticas');
  console.log('  ‚öñÔ∏è Carla Dias (Comit√™) - Independente, equaliza√ß√£o de avalia√ß√µes');
  console.log('  üëë Bruno Mendes (Gestor) ‚Üí Ana Oliveira & Felipe Silva (Colaboradores)');
  console.log('');
  console.log('üéØ Tipos de Usu√°rio:');
  console.log('  ‚Ä¢ Admin: Gerenciamento total do sistema (sem v√≠nculos de projeto)');
  console.log('  ‚Ä¢ RH: Configura√ß√£o e acompanhamento (sem v√≠nculos de projeto)');
  console.log('  ‚Ä¢ Comit√™: Equaliza√ß√£o final (sem v√≠nculos de projeto)');
  console.log('  ‚Ä¢ Colaborador: Participa como avaliado (vinculado a projetos)');
  console.log('  ‚Ä¢ Gestor: Avalia liderados + √© avaliado (vinculado a projetos)');
  console.log('');
  console.log('üîë Exemplos de Roles por Projeto:');
  console.log('  ‚Ä¢ Bruno: MANAGER no Alpha e API Core');
  console.log('  ‚Ä¢ Ana: COLLABORATOR no Alpha e Mobile App');
  console.log('  ‚Ä¢ Felipe: COLLABORATOR no API Core e Mobile App');
  console.log('  ‚Ä¢ Eduardo, Diana, Carla: SEM v√≠nculos de projeto');
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
