// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.sqlite"
}

enum UserRole {
  COLLABORATOR
  MANAGER
  MENTOR
  COMMITTEE
  RH
  ADMIN
}

enum CriterionPillar {
  BEHAVIOR
  EXECUTION
  MANAGEMENT
}

enum EvaluationStatus {
  DRAFT
  SUBMITTED
  EQUALIZED
  CLOSED
}

enum CycleStatus {
  UPCOMING
  OPEN
  EQUALIZATION
  CLOSED
}

// ENTIDADES CENTRAIS

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  /// DADOS DE ESTRUTURA ORGANIZACIONAL
  jobTitle     String
  seniority    String
  careerTrack  String
  businessUnit String

  /// RELACIONAMENTOS DE HIERARQUIA E MENTORIA
  managerId String?
  manager   User?     @relation("ManagerToDirectReports", fields: [managerId], references: [id], onDelete: SetNull)
  directReports User[] @relation("ManagerToDirectReports")

  mentorId     String?
  mentor       User?     @relation("MentorToMentees", fields: [mentorId], references: [id], onDelete: SetNull)
  mentees      User[]    @relation("MentorToMentees")

  /// RELACIONAMENTOS MUITOS-PARA-MUITOS - Aponta para a nova tabela de junção
  roles    UserRoleAssignment[]
  projects UserProjectAssignment[]

  /// RELACIONAMENTOS COM AVALIAÇÕES E DOCUMENTOS
  selfAssessments      SelfAssessment[]
  assessmentsGiven     Assessment360[] @relation("Assessor")
  assessmentsReceived  Assessment360[] @relation("Evaluated")
  referencesGiven      ReferenceFeedback[] @relation("ReferenceAuthor")
  referencesReceived   ReferenceFeedback[] @relation("ReferenceSubject")
  finalEvaluations     FinalEvaluation[]
  okrs                 OKR[]
  pdis                 PDI[]
  committeeObservations CommitteeObservation[]

  @@map("users")
}

model EvaluationCycle {
  id        String      @id @default(uuid())
  name      String      @unique
  status    CycleStatus @default(UPCOMING)
  startDate DateTime
  endDate   DateTime

  /// RELACIONAMENTO COM PAPÉIS CONTEXTUAIS
  participants UserRoleAssignment[]

  // Outros relacionamentos
  selfAssessments   SelfAssessment[]
  assessments360    Assessment360[]
  referenceFeedbacks ReferenceFeedback[]
  finalEvaluations   FinalEvaluation[]
  okrs              OKR[]
  pdis              PDI[]

  @@map("evaluation_cycles")
}

model Criterion {
  id              String   @id @default(uuid())
  name            String
  description     String
  pillar          CriterionPillar
  isActive        Boolean  @default(true)

  selfAssessmentAnswers SelfAssessmentAnswer[]
  assessment360Answers Assessment360Answer[]
  finalEvaluationAnswers FinalEvaluationAnswer[]

  @@map("criteria")
}

// ==========================================
// TABELAS DE AVALIAÇÕES (Sem alterações aqui)
// ==========================================

model SelfAssessment {
  id        String           @id @default(uuid())
  cycleId   String
  authorId  String
  status    EvaluationStatus @default(DRAFT)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  author  User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  cycle   EvaluationCycle      @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  answers SelfAssessmentAnswer[]

  @@unique([authorId, cycleId])
  @@map("self_assessments")
}

model SelfAssessmentAnswer {
  id               String @id @default(uuid())
  selfAssessmentId String
  criterionId      String
  score            Int
  justification    String

  selfAssessment SelfAssessment @relation(fields: [selfAssessmentId], references: [id], onDelete: Cascade)
  criterion      Criterion      @relation(fields: [criterionId], references: [id], onDelete: Restrict)

  @@unique([selfAssessmentId, criterionId])
  @@map("self_assessment_answers")
}

model Assessment360 {
  id              String           @id @default(uuid())
  cycleId         String
  authorId        String
  evaluatedUserId String
  status          EvaluationStatus @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  author        User                  @relation("Assessor", fields: [authorId], references: [id], onDelete: Cascade)
  evaluatedUser User                  @relation("Evaluated", fields: [evaluatedUserId], references: [id], onDelete: Cascade)
  cycle         EvaluationCycle       @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  answers       Assessment360Answer[]

  @@unique([authorId, evaluatedUserId, cycleId])
  @@map("assessments_360")
}

model Assessment360Answer {
  id            String   @id @default(uuid())
  assessmentId  String
  criterionId   String
  score         Int
  justification String

  assessment Assessment360 @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  criterion  Criterion     @relation(fields: [criterionId], references: [id], onDelete: Restrict)

  @@unique([assessmentId, criterionId])
  @@map("assessment_360_answers")
}

model ReferenceFeedback {
  id                String   @id @default(uuid())
  cycleId           String
  authorId          String
  referencedUserId  String
  topic             String
  justification     String
  createdAt         DateTime @default(now())

  author         User            @relation("ReferenceAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  referencedUser User            @relation("ReferenceSubject", fields: [referencedUserId], references: [id], onDelete: Cascade)
  cycle          EvaluationCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@map("reference_feedbacks")
}

model FinalEvaluation {
  id        String   @id @default(uuid())
  cycleId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle   EvaluationCycle           @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  answers FinalEvaluationAnswer[]
  committeeObservations CommitteeObservation[]

  @@unique([userId, cycleId])
  @@map("final_evaluations")
}

model FinalEvaluationAnswer {
  id                String @id @default(uuid())
  finalEvaluationId String
  criterionId       String
  finalScore        Int
  committeeNotes    String

  finalEvaluation FinalEvaluation @relation(fields: [finalEvaluationId], references: [id], onDelete: Cascade)
  criterion       Criterion       @relation(fields: [criterionId], references: [id], onDelete: Restrict)

  @@unique([finalEvaluationId, criterionId])
  @@map("final_evaluation_answers")
}

model CommitteeObservation {
    id String @id @default(uuid())
    finalEvaluationId String
    authorId String
    observation String
    createdAt DateTime @default(now())

    finalEvaluation FinalEvaluation @relation(fields: [finalEvaluationId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("committee_observations")
}

// ==========================================
// MÓDULOS DE OKR E PDI (Sem alterações aqui)
// ==========================================

model OKR {
  id          String   @id @default(uuid())
  cycleId     String
  userId      String
  objective   String
  keyResult   String
  progress    Float    @default(0)
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle EvaluationCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@map("okrs")
}

model PDI {
  id               String   @id @default(uuid())
  cycleId          String
  userId           String
  developmentGoal  String
  actionPlan       String
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle EvaluationCycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@map("pdis")
}

// ==========================================
// TABELAS DE JUNÇÃO (Muitos-para-Muitos) - Principais Alterações
// ==========================================

model Project {
  id    String @id @default(uuid())
  name  String @unique
  /// O relacionamento agora aponta para a nova tabela de junção
  assignedUsers UserProjectAssignment[]
  rolesAssigned UserRoleAssignment[]

  @@map("projects")
}

model UserProjectAssignment {
  userId    String
  projectId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("user_project_assignments")
}

// Tabela de junção de roles com ESCOPO
model UserRoleAssignment {
  id        String   @id @default(uuid()) // Chave primária simples para facilitar
  userId    String
  role      UserRole

  // ESCOPOS (CAMPOS OPCIONAIS)
  projectId String? // Se preenchido, a role se aplica a este projeto
  cycleId   String? // Se preenchido, a role se aplica a este ciclo

  // Relacionamentos
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cycle   EvaluationCycle? @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  // Garante que uma role não seja atribuída duas vezes no mesmo contexto
  @@unique([userId, role, projectId, cycleId])
  @@map("user_role_assignments")
}